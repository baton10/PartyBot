from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String, create_engine
from sqlalchemy.orm import scoped_session, sessionmaker

Base = declarative_base()
DBSession = scoped_session(sessionmaker())

dbusers = 'sqlite:///Base_users.db' # все обращения со стороны - отвечает sqlalchemy", а внутренний процес - sqlite


class Users(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True)
    name = Column(String(9))

def init_sqlalchemy(dbusers):
    # global engine # не нужен
    engine = create_engine(dbname, echo=True)  # True - ведет лог, False - не ведет
    # DBSession.remove() # зачем нужно?
    DBSession.configure(bind=engine, autoflush=False, expire_on_commit=False)
    # Base.metadata.drop_all(engine) # зачем нужно?
    Base.metadata.create_all(engine)

class Tags(Base):
    __tablename__ = "tags"
    id = Column(Integer, primary_key=True)
    name = Column(String(255))
    tag = Column(String(99))

def init_sqlalchemy(Base):
    # global engine # не нужен
    engine = create_engine(dbusers, echo=True)  # True - ведет лог, False - не ведет
    # DBSession.remove() # зачем нужно?
    DBSession.configure(bind=engine, autoflush=False, expire_on_commit=False)
    # Base.metadata.drop_all(engine) # зачем нужно?
    Base.metadata.create_all(engine)


class Events(Base):
    __tablename__ = "events"
    id = Column(Integer, primary_key=True)
    name = Column(String(255))
    time = Column(Integer) # Datetime поставить?

def init_sqlalchemy(dbusers):
    #global engine # не нужен
    engine = create_engine(dbusers, echo=True) # True - ведет лог, False - не ведет
    #DBSession.remove() # зачем нужно?
    DBSession.configure(bind=engine, autoflush=False, expire_on_commit=False)
    #Base.metadata.drop_all(engine) # зачем нужно?
    Base.metadata.create_all(engine)

init_sqlalchemy(dbusers)
